## 2.1
docker-compose.yml-----------------------------
version: '3'

services:
  first-volume-exercise:
    image: devopsdockeruh/first_volume_exercise
    volumes:
      - ./logs.txt:/usr/app/logs.txt
-----------------------------------------------

## 2.2
docker-compose.yml-----------------------------
version: '3.5'

services:
  web-service:
    image: devopsdockeruh/ports_exercise
    ports:
      - 8000:80
-----------------------------------------------

## 2.3
docker-compose.yml-----------------------------
version: '3.5'

services:
  frontend:
    image: frontend
    ports:
      - 9001:5000
  backend:
    image: backend
    ports:
      - 9000:8000
-----------------------------------------------

## 2.4
$ docker-compose up --scale compute=3

## 2.5
docker-compose.yml-----------------------------
version: '3.5'

services:
  frontend:
    image: frontend
    ports:
      - 9001:5000
  backend:
    image: backend
    ports:
      - 9000:8000
    environment:
      - REDIS=redis
  redis:
    image: redis
    ports:
      - 6379:6379
-----------------------------------------------

## 2.6
docker-compose.yml-----------------------------
version: '3.5'

services:
  redis:
    image: redis
  postgres:
    image: postgres
    environment: 
      - POSTGRES_PASSWORD=password
    volumes:
      - database:/var/lib/postgresql/data
  backend:
    image: backend
    ports:
      - 8000:8000
    environment:
      - REDIS=redis
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_HOST=postgres
    depends_on:
      - postgres
      - redis
  frontend:
    image: frontend
    ports:
      - 5000:5000

volumes:
  database:
-----------------------------------------------

## 2.7
docker-compose.yml-----------------------------
version: '3.5'

services:
  frontend:
    image: ml-frontend
    ports:
      - 3000:3000
  backend:
    image: ml-backend
    ports:
      - 5000:5000
    volumes:
      - model:/src/model
    depends_on:
      - training
  training:
    image: ml-training
    volumes:
      - images:/src/imgs
      - model:/src/model

volumes:
  images:
  model:
-----------------------------------------------

## 2.8
docker-compose.yml-----------------------------
version: '3.5'

services:
  redis:
    image: redis
  postgres:
    image: postgres
    environment: 
      - POSTGRES_PASSWORD=password
    volumes:
      - database:/var/lib/postgresql/data
  nginx:
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
  backend:
    image: backend
    build:
      context: ../backend-example-docker
    environment:
      - REDIS=redis
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - DB_HOST=postgres
      - FRONT_URL=frontend
    depends_on:
      - postgres
      - redis
  frontend:
    image: frontend
    build:
      context: ../frontend-example-docker
    environment:
      - API_URL=backend

volumes:
  database:
nginx.conf-------------------------------------
events { worker_connections 1024; }

http {
  server {
    listen 80;

    location / {
      proxy_pass http://frontend:5000/;
    }

    location /api/ {
      proxy_pass http://backend:8000/;
    }
  }
}
-----------------------------------------------
